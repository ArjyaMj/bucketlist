{"version":3,"sources":["logo.svg","form-data-component.js","Emoji.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FormDataComponent","props","click","bind","reset","delete","state","inputs","lastInput","textBox","indexToDelete","index","this","setState","exist","JSON","parse","localStorage","getItem","value","del","splice","setItem","stringify","e","target","oldInput","trim","push","result","type","onChange","recordPost","className","onClick","window","confirm","length","map","Component","Emoji","role","aria-label","label","aria-hidden","symbol","App","user","isUserMatched","isLogButton","isRegButton","isLoggedOut","username","handleLogOut","src","srcset","alt","width","height","handleUser","handleLogIn","handleRegister","callRegister","React","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0e1b5bb6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport './App.css';\r\n\r\nexport default class FormDataComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.click = this.click.bind(this);\r\n        this.reset = this.reset.bind(this);   \r\n        this.delete = this.delete.bind(this);     \r\n\r\n        this.state = {\r\n            inputs : [],\r\n            lastInput : \"\",\r\n            textBox : \"\",\r\n            indexToDelete : -1\r\n        }\r\n    }\r\n\r\n    delete(index){\r\n        this.setState({indexToDelete : index})\r\n        var exist = JSON.parse(localStorage.getItem(this.props.value))\r\n        var del = JSON.parse(localStorage.getItem(this.props.value))['userlist']\r\n        del.splice(index,1)\r\n        exist['userlist'] = del\r\n        localStorage.setItem(this.props.value,JSON.stringify(exist))\r\n        \r\n    }\r\n\r\n    reset(){\r\n        this.setState({textBox : \"\",lastInput : \"\"})\r\n        if(JSON.parse(localStorage.getItem(this.props.value))['userlist']) {\r\n            var exist = {}\r\n            exist = JSON.parse(localStorage.getItem(this.props.value))\r\n            delete exist['userlist']\r\n            localStorage.setItem(this.props.value,JSON.stringify(exist))\r\n        }\r\n    }\r\n\r\n    recordPost(e) {\r\n        this.setState({ textBox : e.target.value,lastInput: e.target.value })\r\n    }\r\n\r\n    click() {\r\n        this.setState({indexToDelete:-1,textBox : \"\" ,lastInput : this.state.lastInput})\r\n        var exist = JSON.parse(localStorage.getItem(this.props.value))\r\n        var oldInput = []\r\n        if (this.state.lastInput.trim() != \"\"){\r\n        if(JSON.parse(localStorage.getItem(this.props.value))['userlist']) {\r\n            oldInput = JSON.parse(localStorage.getItem(this.props.value))['userlist']\r\n        } \r\n        oldInput.push(this.state.lastInput);  \r\n        exist['userlist'] = oldInput\r\n        localStorage.setItem(this.props.value, JSON.stringify(exist)); \r\n        }     \r\n      }    \r\n\r\n\r\n    render() {\r\n        var result = []\r\n        if (JSON.parse(localStorage.getItem(this.props.value))['userlist']){\r\n            result = JSON.parse(localStorage.getItem(this.props.value))['userlist']\r\n        }\r\n        \r\n        return (\r\n            <div>\r\n                {this.props.value == \"\" || this.props.value==\"No User\" ? \r\n                \"\" :\r\n                <div>\r\n                <div>\r\n                    <input type=\"text\" value={this.state.textBox} onChange={e=>this.recordPost(e)} />\r\n                    <button  className=\"Add-Button\" onClick={this.click}>Add</button>\r\n                    <button  className=\"Reset-Button\" onClick={() => {if (window.confirm('This Will Delete All Tasks')) this.reset()}}>Reset</button>\r\n                </div> \r\n                <br/>\r\n                <div>\r\n                {   !JSON.parse(localStorage.getItem(this.props.value))['userlist'] || JSON.parse(localStorage.getItem(this.props.value))['userlist'].length==0 ? \r\n                   'Hey '+this.props.value+' You Do Not Have Any Task' : \r\n                   <div>\r\n                       {this.props.value}'s Bucket List\r\n                       <br/><br/>\r\n                       <div>                          \r\n                            {\r\n                                result.map((value,index)=>(<div>                                                                                                                    \r\n                                                             <button className=\"Reset-Button\" onClick={()=>{if (window.confirm('Confirm Delete')) this.delete(index)}}>\r\n                                                        Delete\r\n                                                    </button>    {value}   </div>                                                                                                                                                                                                                                                                                                                                                                      \r\n                                                        )\r\n                                        )\r\n                            }                           \r\n                        </div>\r\n                    </div>\r\n                }\r\n                </div>\r\n                  \r\n                </div>                 \r\n    }  \r\n             </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nconst Emoji = props => (\r\n    <span\r\n        className=\"emoji\"\r\n        role=\"img\"\r\n        aria-label={props.label ? props.label : \"\"}\r\n        aria-hidden={props.label ? \"false\" : \"true\"}\r\n    >\r\n        {props.symbol}\r\n    </span>\r\n);\r\n\r\nexport default Emoji;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport FormDataComponent from './form-data-component'\nimport Emoji from './Emoji'\n// import { openDB, deleteDB } from 'https://unpkg.com/idb?module'\n// import { openDB, deleteDB, wrap, unwrap } from 'idb'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={  \n                  user : \"\",\n                  isUserMatched : false,\n                  isLogButton : false,\n                  isRegButton : false                  \n                }\n  }\n\n  handleUser(e){\n    this.setState({ user : e.target.value,\n                    isUserMatched : false,\n                    isLogButton : false,\n                    isRegButton : false,   \n                    isLoggedOut : false                 \n                  } )\n  }\n\n  handleLogIn(){ \n    if ( JSON.parse(localStorage.getItem(this.state.user)) ) {\n      this.setState({isLogButton : true ,isUserMatched : true , isRegButton : false , isLoggedOut : false})\n    }\n    else { this.setState({isLogButton : true ,isUserMatched : false , isRegButton : false , isLoggedOut : false}) }\n    \n  }\n\n  handleLogOut(){\n    this.setState({isLogButton : false ,isUserMatched : false , isRegButton : false , isLoggedOut : true})\n  }\n\n  handleRegister(){\n    if ( JSON.parse(localStorage.getItem(this.state.user)) ) {\n      this.setState({isRegButton : true ,isUserMatched : true , isLogButton : false ,isLoggedOut : false})\n    }\n    else { this.setState({isRegButton : true ,isUserMatched : false , isLogButton : false ,isLoggedOut : false}) }\n  }\n\n  callRegister() {\n      if (this.state.user.trim() != \"\"){\n        var username = {}\n        username['username']=this.state.user\n        localStorage.setItem(this.state.user,JSON.stringify(username))\n        return <text>Yayy!! Let's Start Filling The Buckets Now! <Emoji symbol=\"🖖\" label=\"Yo\"/></text>\n        } else {return <text>Uh-Oh! Please Provide a UserName and Click Register <Emoji symbol=\"😕\" label=\"Confused\"/> </text>}\n      }\n   \n  render(){\n  return (\n    <div>\n      {\n        this.state.isLogButton && this.state.isUserMatched && !this.state.isLoggedOut ? \n        <div className=\"User-list\">\n          <FormDataComponent value={this.state.user} /> \n          <br/>\n          <button className=\"Log-Out-Button\" onClick={() => this.handleLogOut('LogOut')}>\n            Log Out\n          </button>\n        </div> :\n        <div className=\"App-header\">\n          <img src=\"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/google/263/bucket_1faa3.png\" srcset=\"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/google/263/bucket_1faa3.png 2x\" alt=\"Bucket on Google Android 11.0\" width=\"120\" height=\"120\"/>\n          <text>Let's Start Bucket-Listing !!</text>\n          <br/>\n          <input type=\"text\" onChange={e => this.handleUser(e)}></input> \n          <br/>\n          <button className=\"Log-In-Button\" onClick={() => this.handleLogIn()}>\n            Log In\n          </button> \n          <br/>\n          <button className=\"Register-Button\" onClick={() => this.handleRegister()}>\n            Register\n          </button>\n          <br/>\n          {this.state.isRegButton && this.state.isUserMatched ? <div>Hey There ! You Already Have a Bucket <Emoji symbol=\"👍\" label=\"Like\"/> </div>:\"\"}\n          {this.state.isRegButton && !this.state.isUserMatched ?  this.callRegister() : \"\"}\n          {this.state.isLogButton && !this.state.isUserMatched ? <div>Seems Like You Don't Have a Bucket Yet ! Hit Register <Emoji symbol=\"😐\" label=\"Neutral\"/> </div> : \"\"}      \n        </div> \n      }\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}