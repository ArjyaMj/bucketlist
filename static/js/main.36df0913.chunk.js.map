{"version":3,"sources":["logo.svg","AppDrag.js","form-data-component.js","config/Firebase.js","Home.js","LogIn.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppDrag","props","onDragOver","e","preventDefault","setState","draggedOver","target","value","onDragStart","task","draggedNow","onDrop","bkp","state","tasks","slice","indexDraggedOver","indexOf","indexDraggedNow","splice","this","forEach","push","key","draggable","Component","fire","firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","Rebase","createClass","Home","useState","contactObjects","setContactObjects","textBox","setTextBox","username","useEffect","ref","on","snapshot","val","console","log","className","type","onChange","onClick","t","trim","child","window","confirm","set","title","Object","keys","map","id","remove","handleDelete","auth","signOut","LogIn","login","bind","handleChange","signup","email","password","name","signInWithEmailAndPassword","then","u","catch","error","alert","createUserWithEmailAndPassword","replace","src","srcset","alt","width","height","aria-describedby","placeholder","style","marginLeft","App","authListener","userprop","onAuthStateChanged","user","localStorage","setItem","uid","removeItem","React","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.36df0913.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nexport default class AppDrag extends Component {  \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          tasks: \"\",\r\n          draggedOver: \"\",\r\n          draggedNow: \"\"\r\n        };\r\n      }\r\n\r\n      initiateState(){\r\n        this.setState({tasks : this.props.value})\r\n      }\r\n\r\n      onDragOver = (e) => {\r\n        e.preventDefault();\r\n        this.setState({ draggedOver: e.target.value });\r\n      };\r\n      onDragStart = (e, task) => {\r\n        this.setState({ draggedNow: task });\r\n      };\r\n      onDrop = (e) => {\r\n        var bkp = this.state.tasks.slice();\r\n        var indexDraggedOver = bkp.indexOf(this.state.draggedOver);\r\n        var indexDraggedNow = bkp.indexOf(this.state.draggedNow);\r\n        bkp.splice(indexDraggedNow, 1);\r\n        bkp.splice(indexDraggedOver, 0, this.state.draggedNow);\r\n        this.setState({ tasks: bkp });\r\n      };\r\n    \r\n      render() {\r\n        var tasks = [];\r\n        this.props.value.forEach((task) => {\r\n          tasks.push(\r\n            <div\r\n              key={task}\r\n              onDragStart={(e) => this.onDragStart(e, task)}\r\n              draggable\r\n            >\r\n              {task}\r\n            </div>\r\n          );\r\n        });\r\n        return (\r\n            <div\r\n              onDrop={(e) => this.onDrop(e)}\r\n              onDragOver={(e) => this.onDragOver(e)}\r\n            >\r\n              {tasks}\r\n            </div>\r\n        );\r\n      }\r\n}","import React, { Component } from 'react';\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport './App.css';\r\nimport AppDrag from './AppDrag'\r\n\r\n\r\nexport default class FormDataComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.click = this.click.bind(this);\r\n        this.reset = this.reset.bind(this);   \r\n        this.delete = this.delete.bind(this);     \r\n\r\n        this.state = {\r\n            inputs : [],\r\n            lastInput : \"\",\r\n            textBox : \"\",\r\n            indexToDelete : -1\r\n        }\r\n    }\r\n\r\n    delete(index){\r\n        this.setState({indexToDelete : index})\r\n        var exist = JSON.parse(localStorage.getItem(this.props.value))\r\n        var del = JSON.parse(localStorage.getItem(this.props.value))['userlist']\r\n        del.splice(index,1)\r\n        exist['userlist'] = del\r\n        localStorage.setItem(this.props.value,JSON.stringify(exist))\r\n        \r\n    }\r\n\r\n    reset(){\r\n        this.setState({textBox : \"\",lastInput : \"\"})\r\n        if(JSON.parse(localStorage.getItem(this.props.value))['userlist']) {\r\n            var exist = {}\r\n            exist = JSON.parse(localStorage.getItem(this.props.value))\r\n            delete exist['userlist']\r\n            localStorage.setItem(this.props.value,JSON.stringify(exist))\r\n        }\r\n    }\r\n\r\n    recordPost(e) {\r\n        this.setState({ textBox : e.target.value,lastInput: e.target.value })\r\n    }\r\n\r\n    click() {\r\n        this.setState({indexToDelete:-1,textBox : \"\" ,lastInput : this.state.lastInput})\r\n        var exist = JSON.parse(localStorage.getItem(this.props.value))\r\n        var oldInput = []\r\n        if (this.state.lastInput.trim() != \"\"){\r\n        if(JSON.parse(localStorage.getItem(this.props.value))['userlist']) {\r\n            oldInput = JSON.parse(localStorage.getItem(this.props.value))['userlist']\r\n        } \r\n        oldInput.push(this.state.lastInput);  \r\n        exist['userlist'] = oldInput\r\n        localStorage.setItem(this.props.value, JSON.stringify(exist)); \r\n        }     \r\n      }    \r\n\r\n\r\n    render() {\r\n        var result = []\r\n        if (JSON.parse(localStorage.getItem(this.props.value))['userlist']){\r\n            result = JSON.parse(localStorage.getItem(this.props.value))['userlist']\r\n        }\r\n        var inputAppDrag ={willUpdate :1 , tasks : result}\r\n        \r\n        return (\r\n            <div>\r\n                {this.props.value == \"\" || this.props.value==\"No User\" ? \r\n                \"\" :\r\n                <div>\r\n                <div>\r\n                    <input type=\"text\" value={this.state.textBox} onChange={e=>this.recordPost(e)} />\r\n                    <button  className=\"Add-Button\" onClick={this.click}>Add</button>\r\n                    <button  className=\"Reset-Button\" onClick={() => {if (window.confirm('This Will Delete All Tasks')) this.reset()}}>Reset</button>\r\n                </div> \r\n                <br/>\r\n                <div>\r\n                {   !JSON.parse(localStorage.getItem(this.props.value))['userlist'] || JSON.parse(localStorage.getItem(this.props.value))['userlist'].length==0 ? \r\n                   'Hey '+this.props.value+' You Do Not Have Any Task' : \r\n                   <div>\r\n                       {this.props.value}'s Bucket List\r\n                       <br/><br/>\r\n                       <div>                                               \r\n                       <AppDrag value={inputAppDrag}/>                    \r\n                        </div>\r\n                    </div>\r\n                }\r\n                </div>\r\n                  \r\n                </div>                 \r\n    }  \r\n             </div>\r\n        )\r\n    }\r\n}","\r\nimport * as  firebase from 'firebase'\r\nimport Rebase from 're-base';   \r\n  // Your web app's Firebase configuration \r\n\r\n  // For Firebase JS SDK v7.20.0 and later, measurementId is optional     \r\n    var firebaseConfig = { \r\n\r\n    apiKey: process.env.REACT_APP_APIKEY, \r\n\r\n    authDomain: process.env.REACT_APP_AUTHDOMAIN, \r\n\r\n    databaseURL: process.env.REACT_APP_DATABASEURL, \r\n\r\n    projectId: process.env.REACT_APP_PROJECTID, \r\n\r\n    storageBucket: process.env.REACT_APP_STORAGEBUCKET, \r\n\r\n    messagingSenderId: process.env.REACT_APP_MESSAGINGSENDERID, \r\n\r\n    appId: process.env.REACT_APP_APPID, \r\n\r\n    measurementId: process.env.REACT_APP_MEASUREMENTID \r\n\r\n  }; \r\n\r\n  // Initialize Firebase \r\n\r\n const fire = firebase.initializeApp(firebaseConfig); \r\n const database = fire.database()\r\n const base = Rebase.createClass(fire.database()) \r\n\r\n\r\n\r\n export  {fire , base ,database};\r\n","import React,{useState,useEffect} from 'react';\r\nimport {fire , base ,database} from './config/Firebase'\r\n\r\nconst Home =(props)=> {\r\n    var [contactObjects,setContactObjects] = useState({})\r\n    var [textBox,setTextBox] =  useState('')\r\n    var username = props.username\r\n    useEffect (()=>{database.ref().on('value',(snapshot) =>{\r\n        setContactObjects({...snapshot.val()});\r\n        console.log(snapshot.val())\r\n            })},[]);\r\n\r\n     function recordPost(e) {\r\n        setTextBox(e.target.value);\r\n    }\r\n\r\n     function addTask(t) {\r\n         if (t.trim()!=\"\"){\r\n            database.ref('Details').child(username).child('tasks').push(t)\r\n         }\r\n        \r\n        setTextBox('')\r\n    }\r\n\r\n    function reset(){\r\n        database.ref('Details').child(username).child('tasks').set({title : \" \"})\r\n        setTextBox('')\r\n    }\r\n\r\n    function handleDelete(task){\r\n        database.ref('Details').child(username).child('tasks').child(task).remove()\r\n    }\r\n\r\n    function handleLogOut() {\r\n        fire.auth().signOut();\r\n    }  \r\n\r\n        return(\r\n        <div className=\"User-list\">\r\n            <div>\r\n                <input type=\"text\" value={textBox} onChange={recordPost} />\r\n                <button  className=\"Add-Button\" onClick={()=>addTask(textBox)}>Add</button>\r\n                <button  className=\"Reset-Button\" onClick={() => {\r\n                    if (window.confirm('Empty Your Bucket ?')) reset()\r\n                    }}>Reset</button>\r\n            </div>\r\n            <div>\r\n                {\r\n                    Object.keys(contactObjects).map\r\n                    (\r\n                        id =>{\r\n                        return(\r\n                            Object.keys(contactObjects[id][username].tasks).map(\r\n                            task=> {return (contactObjects[id][username].tasks[task].trim()!=\"\" ? \r\n                            <div> \r\n                                <button className=\"Reset-Button\" onClick={()=>{\r\n                                if (window.confirm('Confirm Delete')) handleDelete(task)}}>\r\n                                    Delete\r\n                                    </button> {contactObjects[id][username].tasks[task]}  \r\n                                </div> : \"\"\r\n                            )\r\n                        }\r\n                        )  )\r\n                    }\r\n                    )\r\n                }\r\n            </div>\r\n            <br/>\r\n            <div>\r\n            <button className=\"Log-Out-Button\" onClick={handleLogOut}>\r\n            Log Out\r\n            </button>\r\n            </div>\r\n        </div>\r\n        )\r\n    \r\n};\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\n// import { Link } from 'react-router-dom';\r\nimport {fire , base ,database} from './config/Firebase';\r\n\r\nclass LogIn extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.login = this.login.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.signup = this.signup.bind(this);\r\n    this.state = {\r\n      email: '',\r\n      password: ''\r\n    };\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  login(e) {\r\n    e.preventDefault();\r\n    fire.auth().signInWithEmailAndPassword(this.state.email, this.state.password).then((u)=>{\r\n    }).catch((error) => {\r\n        alert(error);\r\n      });\r\n  }\r\n\r\n  signup(e){\r\n    e.preventDefault();\r\n    fire.auth().createUserWithEmailAndPassword(this.state.email, this.state.password).then((u)=>{\r\n        alert(\"You Have Been Successfully Registered\");\r\n        database.ref('Details').child(this.state.email.replace(\"@\",\"\").replace(\".\",\"\")).child('username').set(this.state.email);\r\n        database.ref('Details').child(this.state.email.replace(\"@\",\"\").replace(\".\",\"\")).child('tasks/title').set(\"\")\r\n    }).then((u)=>{console.log(u)})\r\n    .catch((error) => {\r\n        alert(error);\r\n      })\r\n  }\r\n  render() {\r\n    return (\r\n       <div className=\"App-header\">\r\n            <div>\r\n                <img src=\"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/google/263/bucket_1faa3.png\" srcset=\"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/google/263/bucket_1faa3.png 2x\" alt=\"Bucket on Google Android 11.0\" width=\"120\" height=\"120\"/>\r\n            </div>\r\n            <text>Let's Start Bucket-Listing !!</text>\r\n            <div>\r\n                <input value={this.state.email} onChange={this.handleChange} type=\"email\" name=\"email\" className=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\" />\r\n                <br/>\r\n                <input  value={this.state.password} onChange={this.handleChange} type=\"password\" name=\"password\" className=\"form-control\" id=\"exampleInputPassword1\" placeholder=\"Password\" />\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\" onClick={this.login} className=\"Log-In-Button\">Login</button>\r\n                <button onClick={this.signup} style={{marginLeft:10}} className=\"Register-Button\">Sign Up</button>\r\n            </div>\r\n \r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default LogIn;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport FormDataComponent from './form-data-component'\nimport Emoji from './Emoji'\nimport  {fire , base ,database} from './config/Firebase'\nimport Home from './Home'\nimport LogIn from './LogIn'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.authListener = this.authListener.bind(this);\n    this.state={  \n                  userprop : [],  \n                  username : ''          \n                }\n  }\n\n  componentDidMount(){\n    this.authListener();\n  }\n\n  authListener() {\n    fire.auth().onAuthStateChanged((user) => {\n      console.log(user);\n      if (user) {\n        this.setState({ userprop : user , username : user.email});\n        localStorage.setItem('user', user.uid);\n      } else {\n        this.setState({ userprop: null });\n        localStorage.removeItem('user');\n      }\n    });\n  }\n   \n  render(){\n  return (\n    <div>\n      {this.state.userprop ?   <Home username={this.state.username.replace(\"@\",\"\").replace(\".\",\"\")}/> : <LogIn />}\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}